import numpy as np
from pynwb import TimeSeries
from ecogvis.signal_processing.detect_events import detect_events,threshcross

def test_detect_events():
    data1 = np.array([0.43060109, 0.01642865, 0.86227037, 0.31399529, 0.72237145,
                       0.80504707, 0.96614454, 0.79118631, 0.59198652, 0.39667888,
                       0.65503974, 0.66425661, 0.28238974, 0.51550302, 0.09448843,
                       0.69219383, 0.29218348, 0.01314374, 0.57577679, 0.55085522,
                       0.75439268, 0.56423104, 0.5659912 , 0.97437687, 0.22796283,
                       0.20931447, 0.17214473, 0.62683278, 0.45670886, 0.84722966,
                       0.98298421, 0.7828592 , 0.54700391, 0.0940989 , 0.67914873,
                       0.14165902, 0.04767118, 0.72474615, 0.62685645, 0.43379065,
                       0.61568838, 0.50434639, 0.4023029 , 0.6915228 , 0.71082182,
                       0.71536664, 0.66501071, 0.68243413, 0.97472   , 0.25372602])

    data2 = np.array([0.59538162, 0.65958574, 0.71499711, 0.18542923, 0.46438958,
                       0.46108625, 0.83923584, 0.1103122 , 0.77619672, 0.53363076,
                       0.61197629, 0.54585931, 0.76467251, 0.41716518, 0.86792847,
                       0.76107188, 0.64887556, 0.17745642, 0.52916   , 0.74203169,
                       0.05905782, 0.71236783, 0.73968626, 0.92222958, 0.86214192,
                       0.1172514 , 0.96086921, 0.31925511, 0.69276741, 0.53313578,
                       0.2524886 , 0.79697958, 0.68350768, 0.39510471, 0.14431961,
                       0.22731593, 0.96330791, 0.81116899, 0.86054563, 0.24250624,
                       0.99042458, 0.91482766, 0.41867176, 0.59214239, 0.47941673,
                       0.81239715, 0.04072479, 0.56510074, 0.66482052, 0.73244233])

    speaker_data = TimeSeries(name='speaker_data', data=data1, unit='m', starting_time=0.0, rate=1.0)
    mic_data = TimeSeries(name='mic_data', data=data2, unit='m', starting_time=0.0, rate=1.0)

    speakerDS, speakerEventDS, micDS, micEventDS = detect_events(speaker_data, mic_data)

    speakerDS_expected, speakerEventDS_expected, micDS_expected, micEventDS_expected = (np.array([0.291835, 0.617208]), 
    np.array([30.]),np.array([0., 0.699534]),np.array([30.]))

    np.testing.assert_array_almost_equal(speakerDS,speakerDS_expected)
    np.testing.assert_array_almost_equal(speakerEventDS,speakerEventDS_expected)
    np.testing.assert_array_almost_equal(micDS,micDS_expected)
    np.testing.assert_array_almost_equal(micEventDS,micEventDS_expected)

    
def test_threshcross():
    data = np.array([-0.00923858, -0.46818037,  0.97913552,  1.44891143,  0.52656067,
                   -0.13614786, -1.15257763,  0.19372024, -0.27798147,  0.3749529 ,
                   -1.34686999,  0.65927353, -1.20584738, -1.26425261,  2.1550186 ,
                    0.25529244,  0.86569944,  0.08566919,  1.60049703, -0.77054931,
                   -0.16126592, -0.149841  , -0.42771099,  0.34550433, -1.36395812,
                    0.8393572 , -0.21272933,  0.90493892,  1.8125925 , -0.45761982,
                   -0.69935143,  1.26503883, -0.00657156,  1.20480859,  1.44862601,
                    0.79878701, -0.27143059, -1.54836016, -0.00322803, -0.29347789,
                    0.76488881,  0.93952847,  1.99928338, -1.09587945, -0.52881138,
                    0.31639658,  1.32548262,  0.60921676, -1.32819148,  0.46352056])
    out = threshcross(data,threshold=0.08)
    out_expected = np.array([ 2,  7,  9, 11, 14, 23, 25, 27, 31, 33, 40, 45, 49])
    np.testing.assert_equal(out,out_expected)
